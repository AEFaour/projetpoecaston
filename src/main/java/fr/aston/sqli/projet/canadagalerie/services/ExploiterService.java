package fr.aston.sqli.projet.canadagalerie.services;

import java.util.List;
import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

//import fr.aston.sqli.projet.canadagalerie.controllers.Authentication;
import fr.aston.sqli.projet.canadagalerie.dao.IExploiterRepository;
//import fr.aston.sqli.projet.canadagalerie.models.sql.Role;
import fr.aston.sqli.projet.canadagalerie.models.sql.Exploiter;

//import org.springframework.security.authentication.AuthenticationManager;
//import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
//import org.springframework.security.core.Authentication;

@Service
public class ExploiterService {

	@Autowired
	private IExploiterRepository exploiterRepository;
	
//	@Autowired
//	private AuthenticationManager authenticationManager;
//	
//	@Autowired
//	private PasswordEncoder passwordEncoder;
	
	
	public List<Exploiter> findAll(){
		
		return (List<Exploiter>) exploiterRepository.findAll();
		
	}
	
	public Exploiter findById(Long id) throws Exception{
	
		Optional<Exploiter> resu  = this.exploiterRepository.findById(id);
		if(resu.isPresent()) {
			Exploiter ex = resu.get();
			return ex;
		}
		throw new Exception("L'Utilisateur " + id + " est introuvable");
	}
	
	
	public Exploiter findByEmail(String email) throws Exception{
		
		Optional<Exploiter> resu = this.exploiterRepository.findByEmail(email);
		if(resu.isPresent()) {
			Exploiter e = resu.get();
			return e;
		}
		throw new Exception("L'Utilisateur " + email + " est introuvable");
	}
	
//	public List<Exploiter> findByCategory(Category category) throws Exception{
//		try {
//			return (List<Exploiter>) exploiterRepository.findByCategory(category);
//		} catch (Exception e) {
//			throw new Exception("Aucune Utilisateur de " + category + " a été trouvé");
//		}
//		
//	}

	
	public Exploiter saveOrUpdate(Exploiter exploiter) {
		
		//exploiter.setPassword(passwordEncoder.encode(exploiter.getPassword()));
		exploiterRepository.save(exploiter);
		
		return exploiter;
	}
	
	public void deleteExploiterById(Long id) throws Exception {
		try {
			exploiterRepository.deleteById(id);
		} catch (Exception e) {
			throw new Exception("L'Utilisateur " + id + " est introuvable");
		}
	}

//	public Authentication signin(String email, String password) {
//		return authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(email, password));
//	}
}
