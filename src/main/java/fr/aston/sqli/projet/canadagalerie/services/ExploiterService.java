package fr.aston.sqli.projet.canadagalerie.services;

import java.util.List;
import java.util.Optional;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import fr.aston.sqli.projet.canadagalerie.dao.IExploiterRepository;
import fr.aston.sqli.projet.canadagalerie.exceptions.NotFoundWithSuchParameterException;
import fr.aston.sqli.projet.canadagalerie.models.sql.Exploiter;

@Service
public class ExploiterService {

	private static final Logger LOG = LogManager.getLogger();
	@Autowired
	private IExploiterRepository exploiterRepository;
	@Autowired
	private PasswordEncoder passwordEncoder;

	public List<Exploiter> findAll() {
		return (List<Exploiter>) exploiterRepository.findAll();
	}

	public Exploiter findById(Long id) throws Exception {
		Optional<Exploiter> exploiter = exploiterRepository.findById(id);
		if (exploiter.isPresent()) {
			return exploiter.get();
		}
		throw new NotFoundWithSuchParameterException(
				"Entity does not exist with id = " + id + " => className: " + getClass().getSimpleName());
	}

	public Exploiter findByEmail(String email) {
		Optional<Exploiter> exploiter = exploiterRepository.findByEmail(email);
		if (exploiter.isPresent()) {
			return exploiter.get();
		} 
		else {
			ExploiterService.LOG.info("No exploiter with such eamil: {}", email);
			return null;
		}
	}

	public Exploiter saveOrUpdate(Exploiter exploiter) throws Exception {
		Exploiter newExploiter = new Exploiter();
		if (exploiter.getId() != null) {
			ExploiterService.LOG.info("Updating artist => (this is an update because the id is not null)");
			newExploiter = this.exploiterRepository.save(exploiter);
			return  newExploiter;
		}
		else if  (findByEmail(exploiter.getEmail()) == null  && exploiter.getId() == null) {
			ExploiterService.LOG.info("Insert the artist (Taking care that the address is never used before since it is unique)");
			exploiter.setPassword(passwordEncoder.encode(exploiter.getPassword()));
			newExploiter = this.exploiterRepository.save(exploiter);
			return newExploiter;
		}
		else {
			ExploiterService.LOG.error("Attempring to register but the address is already used! please choose another address!");
			throw new IllegalStateException("Address mail is already use!");
		}
	}

	public void deleteExploiterById(Long id) throws Exception {
		try {
			exploiterRepository.deleteById(id);
		} catch (Exception e) {
			throw new NotFoundWithSuchParameterException(
					"Entity does not exist with id = " + id + " => className: " + getClass().getSimpleName());
		}
	}
}
