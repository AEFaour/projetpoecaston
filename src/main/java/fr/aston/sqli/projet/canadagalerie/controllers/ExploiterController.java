package fr.aston.sqli.projet.canadagalerie.controllers;

import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import fr.aston.sqli.projet.canadagalerie.models.sql.Exploiter;
import fr.aston.sqli.projet.canadagalerie.services.ExploiterService;

@RestController
@RequestMapping("/api/exploiters")
public class ExploiterController {

	private static final Logger LOG = LogManager.getLogger();
	@Autowired
	public ExploiterService exploiterService;

	@GetMapping
	@PreAuthorize("hasAuthority('exploiter:read')")
	public ResponseEntity<List<Exploiter>> findAllExlpoiters() {
		ExploiterController.LOG.info("Listing all exploiters");
		List<Exploiter> exploiters = this.exploiterService.findAll();
		return new ResponseEntity<>(exploiters, HttpStatus.OK);
	}

	@GetMapping("/{id}")
	@PreAuthorize("hasAuthority('exploiter:read')")
	public ResponseEntity<Exploiter> getExploiterById(@PathVariable("id") Long id) {
		try {
			return new ResponseEntity<>(this.exploiterService.findById(id), HttpStatus.OK);
		} catch (Exception e) {
			ExploiterController.LOG.error("No exploiter present with such id => {}", id);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("email/{email}")
	@PreAuthorize("hasAuthority('exploiter:read')")
	public ResponseEntity<Exploiter> getExploiterByEmail(@PathVariable("email") String email) {
		try {
			return new ResponseEntity<>(this.exploiterService.findByEmail(email), HttpStatus.OK);
		} catch (Exception e) {
			ExploiterController.LOG.error("No artist present with such email => {}", email);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@PostMapping
	@PreAuthorize("permitAll()")
	public ResponseEntity<Exploiter> addOrUpdateExploiter(@RequestBody Exploiter exploiter) {
		ExploiterController.LOG.info("Managing the exploiter [{}]", exploiter);
		try {
			Exploiter newExploiter = this.exploiterService.saveOrUpdate(exploiter);
			return new ResponseEntity<>(newExploiter, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.IM_USED);
		}
	}

	@DeleteMapping("/{id}")
	@PreAuthorize("hasAuthority('exploiter:write')")
	public ResponseEntity<?> deleteExploiter(@PathVariable("id") Long id) {
		try {
			this.exploiterService.deleteExploiterById(id);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (Exception e) {
			ExploiterController.LOG.error("No exploiter present with such id => {}", id);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

}
