package fr.aston.sqli.projet.canadagalerie.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import org.springframework.security.access.prepost.PreAuthorize;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

//import javax.validation.Valid;

//import org.springframework.security.core.Authentication;

import fr.aston.sqli.projet.canadagalerie.models.sql.Exploiter;
import fr.aston.sqli.projet.canadagalerie.services.ExploiterService;

@RestController
@RequestMapping("/api/exploiters")
public class ExploiterController {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(ExploiterController.class);
	
	@Autowired
	public ExploiterService exploiterService;
	
//	@PostMapping("/signin")
//	public Authentication login(@RequestBody @Valid Exploiter exploiter) {
//		return exploiterService.signin(exploiter.getEmail(), exploiter.getPassword());
//	}
	
//	@GetMapping("/signin")
//	public String login() {
//		return "signin";
//	}
	
	
	@GetMapping
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_GUIDE')")
	public ResponseEntity<?> findAllExlpoiters(){
		LOGGER.info("GET /api/exploiters");
		try {
			return ResponseEntity.ok().body(exploiterService.findAll());
		} catch (Exception e) {
			return ResponseEntity.badRequest().body("{'msg': 'probleme'}");
		}
		
	}
	
	@GetMapping("/{id}")
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_GUIDE')")
	public ResponseEntity<?> getExploiterById(@PathVariable("id") Long id) {
		LOGGER.info("GET /api/exploiters/{}", id);
		try {
			return ResponseEntity.ok().body(exploiterService.findById(id));
		} catch (Exception e) {
			return ResponseEntity.badRequest().body("{'msg': 'probleme'}");
		}
	}
	
	@GetMapping("exploiter/{email}")
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_GUIDE')")
	public ResponseEntity<?> getExploiterByEmail(@PathVariable("email") String email) {
		LOGGER.info("GET /api/exploiters/{}", email);
		try {
			return ResponseEntity.ok().body(this.exploiterService.findByEmail(email));
		} catch (Exception e) {
			return ResponseEntity.badRequest().body("{'msg': 'probleme'}");
		}
		
	}
	
//	@RequestMapping(value = "/api/exploiters/exploiter/{category}", method = RequestMethod.GET)
//	public ResponseEntity<?> getExploiterByCategory(@PathVariable("category") Category category) {
//		try {
//			return ResponseEntity.ok().body(this.exploiterService.findByCategory(category));
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body("{'msg': 'probleme'}");
//		}
//		
//	}
	
	
	@PostMapping
	@PreAuthorize("hasAuthority('exploiter:write')")
	public ResponseEntity<?> addOrUpdateExploiter(@RequestBody Exploiter exploiter) {
		LOGGER.info("POST /api/exploiters");
//		if(getExploiterByEmail(exploiter.getEmail()) == null)
//		{
		try {
			this.exploiterService.saveOrUpdate(exploiter);
			return ResponseEntity.ok().body(exploiter.getId()) ;
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(-1L);
		}
		
			
//		}
//		return -1L;
	}
	
	@DeleteMapping("/{id}")
	@PreAuthorize("hasAuthority('exploiter:write')")
	public ResponseEntity<?> deleteExploiter(@PathVariable("id") Long id) throws Exception {
		LOGGER.info("DELETE /api/exploiters/{}", id);
		try {
			this.exploiterService.deleteExploiterById(id);
			return ResponseEntity.ok().body("La personne a été supprimée");
		} catch (Exception e) {
			return ResponseEntity.badRequest().body("{'msg': 'probleme'}");
		}
		
	}
	
}
