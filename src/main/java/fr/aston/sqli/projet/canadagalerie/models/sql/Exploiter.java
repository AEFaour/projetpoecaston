package fr.aston.sqli.projet.canadagalerie.models.sql;

import javax.inject.Inject;
import javax.json.bind.annotation.JsonbDateFormat;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.List;

import javax.persistence.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.fasterxml.jackson.annotation.JsonIgnore;

import fr.aston.sqli.projet.canadagalerie.security.Category;
import fr.aston.sqli.projet.canadagalerie.security.PasswordEncoderConfig;

@Entity
@Table(name = "exploiter")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Exploiter implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(name = "first_name")
	private String firstName;

	@Column(name = "last_name")
	private String lastName;

	@JsonbDateFormat(locale = "fr_FR", value = "dd-MM-yyyy")
	@Column(name = "birthdate")
	private LocalDate birthdate;

	@Column(name = "phone")
	private String phone;

	@Column(name = "email")
	private String email;

	@Column(name = "password")
	private String password;

	@Column(name = "role")
	@Enumerated(EnumType.STRING)
	private Category category;

	// FIXME @JsonIgnore A remplacer par un DTO
	@JsonIgnore
	@ManyToOne
	@JoinColumn(name = "address_id")
	private Address address;

	// FIXME @JsonIgnore A remplacer par un DTO
	@JsonIgnore
	@ManyToMany(mappedBy = "exploiters")
	private List<GuidedTour> guidedTours;

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (this.id == null ? 0 : this.id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (this.getClass() != obj.getClass()) {
			return false;
		}
		Exploiter other = (Exploiter) obj;
		if (this.id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!this.id.equals(other.id)) {
			return false;
		}
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Exploiter [id=");
		builder.append(this.id);
		builder.append(", firstName=");
		builder.append(this.firstName);
		builder.append(", lastName=");
		builder.append(this.lastName);
		builder.append(", birthdate=");
		builder.append(this.birthdate);
		builder.append(", phone=");
		builder.append(this.phone);
		builder.append(", email=");
		builder.append(this.email);
		builder.append(", password=");
		builder.append(this.password);
		builder.append(", role=");
		builder.append(this.category);
		if (this.address != null) {
			builder.append(", address=");
			builder.append(this.address.getId());
		}
		builder.append(", guidedTours=");
		builder.append(this.guidedTours);
		builder.append("]");
		return builder.toString();
	}
	
}

