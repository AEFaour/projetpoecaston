package fr.aston.sqli.projet.canadagalerie.models.sql;

import javax.json.bind.annotation.JsonbDateFormat;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

import java.io.Serializable;
import java.time.LocalDate;

import javax.persistence.*;

import fr.aston.sqli.projet.canadagalerie.security.PasswordEncoderCong;


@Entity
@Table(name="exploiter")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Exploiter implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Id
	@Column(name = "id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column(name = "first_name")
	private String firstName;
	
	@Column(name = "last_name")
	private String lastName;
	
	@JsonbDateFormat(locale = "fr_FR", value = "dd-MM-yyyy")
	@Column(name ="birthdate")
	private LocalDate birthdate;
	
	@Column(name =  "phone")
	private String phone;
	
	@Column(name =  "email")
	private String email;
	
	@Column(name =  "password")
	private String password;
	
	@Column(name = "role")
	@Enumerated(EnumType.STRING)
    private Role role;
	
	@ManyToOne
	private Address address;

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Exploiter other = (Exploiter) obj;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		return true;
	}
	
	@PrePersist
	public void passwordHash() {
		
		this.password = PasswordEncoderCong.passwordEncoder().encode(password);
	}

}
